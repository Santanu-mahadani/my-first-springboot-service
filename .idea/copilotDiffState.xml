<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Student Course Management System&#10;&#10;This is a Spring Boot microservice for managing students, courses, departments, instructors, and enrollments. The service provides RESTful APIs for performing CRUD operations on these entities.&#10;&#10;## Technology Stack&#10;&#10;- Java 17&#10;- Spring Boot 3.1.2&#10;- Spring Data JPA&#10;- H2 Database&#10;- SpringDoc OpenAPI (Swagger)&#10;- Maven&#10;- Lombok&#10;&#10;## Getting Started&#10;&#10;### Prerequisites&#10;&#10;- JDK 17 or later&#10;- Maven 3.6+&#10;&#10;### Running the Application&#10;&#10;1. Clone the repository&#10;2. Navigate to the project directory&#10;3. Run the following command:&#10;   ```bash&#10;   mvn spring-boot:run&#10;   ```&#10;&#10;The application will start on port 8080.&#10;&#10;### Accessing the Application&#10;&#10;- H2 Database Console: http://localhost:8080/h2-console&#10;  - JDBC URL: jdbc:h2:mem:studentdb&#10;  - Username: sa&#10;  - Password: (leave empty)&#10;&#10;- Swagger UI: http://localhost:8080/swagger-ui.html&#10;- API Documentation: http://localhost:8080/api-docs&#10;&#10;## API Endpoints&#10;&#10;### Students&#10;- GET /api/students - Get all students&#10;- GET /api/students/{id} - Get student by ID&#10;- POST /api/students - Create new student&#10;- PUT /api/students/{id} - Update student&#10;- DELETE /api/students/{id} - Delete student&#10;&#10;Similar endpoints exist for Departments, Courses, Instructors, and Enrollments.&#10;&#10;## Database Schema&#10;&#10;The application uses the following entity relationships:&#10;- Student belongs to one Department&#10;- Instructor belongs to one Department&#10;- Course is taught by one Instructor&#10;- Enrollment connects Students with Courses&#10;&#10;## Development&#10;&#10;### Building the Project&#10;```bash&#10;mvn clean install&#10;```&#10;&#10;### Running Tests&#10;```bash&#10;mvn test&#10;```&#10;&#10;## Logging&#10;&#10;The application uses SLF4J with the following log levels:&#10;- DEBUG: Detailed information for debugging&#10;- INFO: General application flow&#10;- ERROR: Error conditions&#10;&#10;Logs are output to the console with timestamp, level, and message." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/controller/CourseController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/controller/CourseController.java" />
              <option name="updatedContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Course;&#10;import com.example.service.service.CourseService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/courses&quot;)&#10;@RequiredArgsConstructor&#10;public class CourseController {&#10;    private static final Logger logger = LoggerFactory.getLogger(CourseController.class);&#10;    private final CourseService courseService;&#10;&#10;    @GetMapping&#10;    public List&lt;Course&gt; getAllCourses() {&#10;        logger.info(&quot;Fetching all courses&quot;);&#10;        return courseService.getAllCourses();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Course getCourseById(@PathVariable Long id) {&#10;        logger.info(&quot;Fetching course by id: {}&quot;, id);&#10;        return courseService.getCourseById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Course createCourse(@RequestBody Course course) {&#10;        logger.info(&quot;Creating new course&quot;);&#10;        return courseService.saveCourse(course);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Course updateCourse(@PathVariable Long id, @RequestBody Course course) {&#10;        logger.info(&quot;Updating course with id: {}&quot;, id);&#10;        return courseService.updateCourse(id, course);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteCourse(@PathVariable Long id) {&#10;        logger.info(&quot;Deleting course with id: {}&quot;, id);&#10;        courseService.deleteCourse(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/controller/DepartmentController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/controller/DepartmentController.java" />
              <option name="originalContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Department;&#10;import com.example.service.service.DepartmentService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/departments&quot;)&#10;@RequiredArgsConstructor&#10;public class DepartmentController {&#10;    private static final Logger logger = LoggerFactory.getLogger(DepartmentController.class);&#10;    private final DepartmentService departmentService;&#10;&#10;    @GetMapping&#10;    public List&lt;Department&gt; getAllDepartments() {&#10;        logger.info(&quot;Fetching all departments&quot;);&#10;        return departmentService.getAllDepartments();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Department getDepartmentById(@PathVariable Long id) {&#10;        logger.info(&quot;Fetching department by id: {}&quot;, id);&#10;        return departmentService.getDepartmentById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Department createDepartment(@RequestBody Department department) {&#10;        logger.info(&quot;Creating new department&quot;);&#10;        return departmentService.saveDepartment(department);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Department updateDepartment(@PathVariable Long id, @RequestBody Department department) {&#10;        logger.info(&quot;Updating department with id: {}&quot;, id);&#10;        return departmentService.updateDepartment(id, department);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteDepartment(@PathVariable Long id) {&#10;        logger.info(&quot;Deleting department with id: {}&quot;, id);&#10;        departmentService.deleteDepartment(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Department;&#10;import com.example.service.service.DepartmentService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/departments&quot;)&#10;@RequiredArgsConstructor&#10;public class DepartmentController {&#10;    private static final Logger logger = LoggerFactory.getLogger(DepartmentController.class);&#10;    private final DepartmentService departmentService;&#10;&#10;    @GetMapping&#10;    public List&lt;Department&gt; getAllDepartments() {&#10;        logger.info(&quot;Fetching all departments&quot;);&#10;        return departmentService.getAllDepartments();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Department getDepartmentById(@PathVariable Long id) {&#10;        logger.info(&quot;Fetching department by id: {}&quot;, id);&#10;        return departmentService.getDepartmentById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Department createDepartment(@RequestBody Department department) {&#10;        logger.info(&quot;Creating new department&quot;);&#10;        return departmentService.saveDepartment(department);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Department updateDepartment(@PathVariable Long id, @RequestBody Department department) {&#10;        logger.info(&quot;Updating department with id: {}&quot;, id);&#10;        return departmentService.updateDepartment(id, department);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteDepartment(@PathVariable Long id) {&#10;        logger.info(&quot;Deleting department with id: {}&quot;, id);&#10;        departmentService.deleteDepartment(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/controller/InstructorController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/controller/InstructorController.java" />
              <option name="originalContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Instructor;&#10;import com.example.service.service.InstructorService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/instructors&quot;)&#10;@RequiredArgsConstructor&#10;public class InstructorController {&#10;    private static final Logger logger = LoggerFactory.getLogger(InstructorController.class);&#10;    private final InstructorService instructorService;&#10;&#10;    @GetMapping&#10;    public List&lt;Instructor&gt; getAllInstructors() {&#10;        logger.info(&quot;Fetching all instructors&quot;);&#10;        return instructorService.getAllInstructors();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Instructor getInstructorById(@PathVariable Long id) {&#10;        logger.info(&quot;Fetching instructor by id: {}&quot;, id);&#10;        return instructorService.getInstructorById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Instructor createInstructor(@RequestBody Instructor instructor) {&#10;        logger.info(&quot;Creating new instructor&quot;);&#10;        return instructorService.saveInstructor(instructor);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Instructor updateInstructor(@PathVariable Long id, @RequestBody Instructor instructor) {&#10;        logger.info(&quot;Updating instructor with id: {}&quot;, id);&#10;        return instructorService.updateInstructor(id, instructor);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteInstructor(@PathVariable Long id) {&#10;        logger.info(&quot;Deleting instructor with id: {}&quot;, id);&#10;        instructorService.deleteInstructor(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Instructor;&#10;import com.example.service.service.InstructorService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/instructors&quot;)&#10;@RequiredArgsConstructor&#10;public class InstructorController {&#10;    private static final Logger logger = LoggerFactory.getLogger(InstructorController.class);&#10;    private final InstructorService instructorService;&#10;&#10;    @GetMapping&#10;    public List&lt;Instructor&gt; getAllInstructors() {&#10;        logger.info(&quot;Fetching all instructors&quot;);&#10;        return instructorService.getAllInstructors();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Instructor getInstructorById(@PathVariable Long id) {&#10;        logger.info(&quot;Fetching instructor by id: {}&quot;, id);&#10;        return instructorService.getInstructorById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Instructor createInstructor(@RequestBody Instructor instructor) {&#10;        logger.info(&quot;Creating new instructor&quot;);&#10;        return instructorService.saveInstructor(instructor);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Instructor updateInstructor(@PathVariable Long id, @RequestBody Instructor instructor) {&#10;        logger.info(&quot;Updating instructor with id: {}&quot;, id);&#10;        return instructorService.updateInstructor(id, instructor);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteInstructor(@PathVariable Long id) {&#10;        logger.info(&quot;Deleting instructor with id: {}&quot;, id);&#10;        instructorService.deleteInstructor(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/controller/StudentController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/controller/StudentController.java" />
              <option name="updatedContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Student;&#10;import com.example.service.service.StudentService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/students&quot;)&#10;@RequiredArgsConstructor&#10;public class StudentController {&#10;    private static final Logger logger = LoggerFactory.getLogger(StudentController.class);&#10;    private final StudentService studentService;&#10;&#10;    @GetMapping&#10;    public List&lt;Student&gt; getAllStudents() {&#10;        logger.info(&quot;Fetching all students&quot;);&#10;        return studentService.getAllStudents();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Student getStudentById(@PathVariable Long id) {&#10;        logger.info(&quot;Fetching student by id: {}&quot;, id);&#10;        return studentService.getStudentById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Student createStudent(@RequestBody Student student) {&#10;        logger.info(&quot;Creating new student&quot;);&#10;        return studentService.saveStudent(student);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Student updateStudent(@PathVariable Long id, @RequestBody Student student) {&#10;        logger.info(&quot;Updating student with id: {}&quot;, id);&#10;        return studentService.updateStudent(id, student);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteStudent(@PathVariable Long id) {&#10;        logger.info(&quot;Deleting student with id: {}&quot;, id);&#10;        studentService.deleteStudent(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/entity/Course.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/entity/Course.java" />
              <option name="updatedContent" value="package com.example.service.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;@Entity&#10;@Data&#10;public class Course {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    private String name;&#10;    private String code;&#10;    private Integer credits;&#10;    private String description;&#10;    &#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;instructor_id&quot;)&#10;    private Instructor instructor;&#10;    &#10;    @OneToMany(mappedBy = &quot;course&quot;)&#10;    private Set&lt;Enrollment&gt; enrollments = new HashSet&lt;&gt;();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/entity/Department.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/entity/Department.java" />
              <option name="updatedContent" value="package com.example.service.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;@Entity&#10;@Data&#10;public class Department {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    private String name;&#10;    private String location;&#10;    &#10;    @OneToMany(mappedBy = &quot;department&quot;)&#10;    private Set&lt;Student&gt; students = new HashSet&lt;&gt;();&#10;    &#10;    @OneToMany(mappedBy = &quot;department&quot;)&#10;    private Set&lt;Instructor&gt; instructors = new HashSet&lt;&gt;();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/entity/Enrollment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/entity/Enrollment.java" />
              <option name="updatedContent" value="package com.example.service.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.time.LocalDate;&#10;&#10;@Entity&#10;@Data&#10;public class Enrollment {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;student_id&quot;)&#10;    private Student student;&#10;    &#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;course_id&quot;)&#10;    private Course course;&#10;    &#10;    private LocalDate enrollmentDate;&#10;    private String grade;&#10;    private String semester;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/entity/Instructor.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/entity/Instructor.java" />
              <option name="updatedContent" value="package com.example.service.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;@Entity&#10;@Data&#10;public class Instructor {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    private String name;&#10;    private String email;&#10;    private String phone;&#10;    private String specialization;&#10;    &#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;department_id&quot;)&#10;    private Department department;&#10;    &#10;    @OneToMany(mappedBy = &quot;instructor&quot;)&#10;    private Set&lt;Course&gt; courses = new HashSet&lt;&gt;();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/entity/Student.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/entity/Student.java" />
              <option name="updatedContent" value="package com.example.service.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;@Entity&#10;@Data&#10;public class Student {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    private String name;&#10;    private String email;&#10;    private String phone;&#10;    private String address;&#10;    &#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;department_id&quot;)&#10;    private Department department;&#10;    &#10;    @OneToMany(mappedBy = &quot;student&quot;)&#10;    private Set&lt;Enrollment&gt; enrollments = new HashSet&lt;&gt;();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/exception/GlobalExceptionHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/exception/GlobalExceptionHandler.java" />
              <option name="updatedContent" value="package com.example.service.exception;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ControllerAdvice;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.ResponseStatus;&#10;import org.springframework.web.context.request.WebRequest;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@ControllerAdvice&#10;public class GlobalExceptionHandler {&#10;    @ExceptionHandler(ResourceNotFoundException.class)&#10;    public ResponseEntity&lt;?&gt; handleResourceNotFoundException(ResourceNotFoundException ex, WebRequest request) {&#10;        Map&lt;String, Object&gt; body = new HashMap&lt;&gt;();&#10;        body.put(&quot;error&quot;, &quot;Resource Not Found&quot;);&#10;        body.put(&quot;message&quot;, ex.getMessage());&#10;        return new ResponseEntity&lt;&gt;(body, HttpStatus.NOT_FOUND);&#10;    }&#10;&#10;    @ExceptionHandler(MethodArgumentNotValidException.class)&#10;    @ResponseStatus(HttpStatus.BAD_REQUEST)&#10;    public ResponseEntity&lt;?&gt; handleValidationExceptions(MethodArgumentNotValidException ex) {&#10;        Map&lt;String, String&gt; errors = new HashMap&lt;&gt;();&#10;        ex.getBindingResult().getFieldErrors().forEach(error -&gt;&#10;            errors.put(error.getField(), error.getDefaultMessage()));&#10;        return new ResponseEntity&lt;&gt;(errors, HttpStatus.BAD_REQUEST);&#10;    }&#10;&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;?&gt; handleGlobalException(Exception ex, WebRequest request) {&#10;        Map&lt;String, Object&gt; body = new HashMap&lt;&gt;();&#10;        body.put(&quot;error&quot;, &quot;Internal Server Error&quot;);&#10;        body.put(&quot;message&quot;, ex.getMessage());&#10;        return new ResponseEntity&lt;&gt;(body, HttpStatus.INTERNAL_SERVER_ERROR);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/exception/ResourceNotFoundException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/exception/ResourceNotFoundException.java" />
              <option name="updatedContent" value="package com.example.service.exception;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.web.bind.annotation.ResponseStatus;&#10;&#10;@ResponseStatus(HttpStatus.NOT_FOUND)&#10;public class ResourceNotFoundException extends RuntimeException {&#10;    public ResourceNotFoundException(String message) {&#10;        super(message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/repository/CourseRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/repository/CourseRepository.java" />
              <option name="updatedContent" value="package com.example.service.repository;&#10;&#10;import com.example.service.entity.Course;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface CourseRepository extends JpaRepository&lt;Course, Long&gt; {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/repository/DepartmentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/repository/DepartmentRepository.java" />
              <option name="updatedContent" value="package com.example.service.repository;&#10;&#10;import com.example.service.entity.Department;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface DepartmentRepository extends JpaRepository&lt;Department, Long&gt; {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/repository/EnrollmentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/repository/EnrollmentRepository.java" />
              <option name="updatedContent" value="package com.example.service.repository;&#10;&#10;import com.example.service.entity.Enrollment;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface EnrollmentRepository extends JpaRepository&lt;Enrollment, Long&gt; {&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/repository/InstructorRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/repository/InstructorRepository.java" />
              <option name="updatedContent" value="package com.example.service.repository;&#10;&#10;import com.example.service.entity.Instructor;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface InstructorRepository extends JpaRepository&lt;Instructor, Long&gt; {&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/repository/StudentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/repository/StudentRepository.java" />
              <option name="updatedContent" value="package com.example.service.repository;&#10;&#10;import com.example.service.entity.Student;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface StudentRepository extends JpaRepository&lt;Student, Long&gt; {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/CourseService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/CourseService.java" />
              <option name="updatedContent" value="package com.example.service.service;&#10;&#10;import com.example.service.entity.Course;&#10;import java.util.List;&#10;&#10;public interface CourseService {&#10;    Course saveCourse(Course course);&#10;    Course getCourseById(Long id);&#10;    List&lt;Course&gt; getAllCourses();&#10;    Course updateCourse(Long id, Course course);&#10;    void deleteCourse(Long id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/DepartmentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/DepartmentService.java" />
              <option name="updatedContent" value="package com.example.service.service;&#10;&#10;import com.example.service.entity.Department;&#10;import java.util.List;&#10;&#10;public interface DepartmentService {&#10;    Department saveDepartment(Department department);&#10;    Department getDepartmentById(Long id);&#10;    List&lt;Department&gt; getAllDepartments();&#10;    Department updateDepartment(Long id, Department department);&#10;    void deleteDepartment(Long id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/EnrollmentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/EnrollmentService.java" />
              <option name="updatedContent" value="package com.example.service.service;&#10;&#10;import com.example.service.entity.Enrollment;&#10;import java.util.List;&#10;&#10;public interface EnrollmentService {&#10;    Enrollment saveEnrollment(Enrollment enrollment);&#10;    Enrollment getEnrollmentById(Long id);&#10;    List&lt;Enrollment&gt; getAllEnrollments();&#10;    Enrollment updateEnrollment(Long id, Enrollment enrollment);&#10;    void deleteEnrollment(Long id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/InstructorService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/InstructorService.java" />
              <option name="updatedContent" value="package com.example.service.service;&#10;&#10;import com.example.service.entity.Instructor;&#10;import java.util.List;&#10;&#10;public interface InstructorService {&#10;    Instructor saveInstructor(Instructor instructor);&#10;    Instructor getInstructorById(Long id);&#10;    List&lt;Instructor&gt; getAllInstructors();&#10;    Instructor updateInstructor(Long id, Instructor instructor);&#10;    void deleteInstructor(Long id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/StudentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/StudentService.java" />
              <option name="updatedContent" value="package com.example.service.service;&#10;&#10;import com.example.service.entity.Student;&#10;import java.util.List;&#10;&#10;public interface StudentService {&#10;    Student saveStudent(Student student);&#10;    Student getStudentById(Long id);&#10;    List&lt;Student&gt; getAllStudents();&#10;    Student updateStudent(Long id, Student student);&#10;    void deleteStudent(Long id);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/CourseServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/CourseServiceImpl.java" />
              <option name="updatedContent" value="package com.example.service.service.impl;&#10;&#10;import com.example.service.entity.Course;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.CourseRepository;&#10;import com.example.service.service.CourseService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class CourseServiceImpl implements CourseService {&#10;    private static final Logger logger = LoggerFactory.getLogger(CourseServiceImpl.class);&#10;    private final CourseRepository courseRepository;&#10;&#10;    @Override&#10;    public Course saveCourse(Course course) {&#10;        logger.info(&quot;Saving course: {}&quot;, course.getName());&#10;        return courseRepository.save(course);&#10;    }&#10;&#10;    @Override&#10;    public Course getCourseById(Long id) {&#10;        logger.info(&quot;Fetching course by id: {}&quot;, id);&#10;        return courseRepository.findById(id)&#10;                .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Course not found with id: &quot; + id));&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Course&gt; getAllCourses() {&#10;        logger.info(&quot;Fetching all courses&quot;);&#10;        return courseRepository.findAll();&#10;    }&#10;&#10;    @Override&#10;    public Course updateCourse(Long id, Course courseDetails) {&#10;        Course course = getCourseById(id);&#10;        course.setName(courseDetails.getName());&#10;        course.setCode(courseDetails.getCode());&#10;        course.setCredits(courseDetails.getCredits());&#10;        course.setDescription(courseDetails.getDescription());&#10;        course.setInstructor(courseDetails.getInstructor());&#10;        logger.info(&quot;Updating course: {}&quot;, id);&#10;        return courseRepository.save(course);&#10;    }&#10;&#10;    @Override&#10;    public void deleteCourse(Long id) {&#10;        Course course = getCourseById(id);&#10;        logger.info(&quot;Deleting course: {}&quot;, id);&#10;        courseRepository.delete(course);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/DepartmentServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/DepartmentServiceImpl.java" />
              <option name="updatedContent" value="package com.example.service.service.impl;&#10;&#10;import com.example.service.entity.Department;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.DepartmentRepository;&#10;import com.example.service.service.DepartmentService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class DepartmentServiceImpl implements DepartmentService {&#10;    private static final Logger logger = LoggerFactory.getLogger(DepartmentServiceImpl.class);&#10;    private final DepartmentRepository departmentRepository;&#10;&#10;    @Override&#10;    public Department saveDepartment(Department department) {&#10;        logger.info(&quot;Saving department: {}&quot;, department.getName());&#10;        return departmentRepository.save(department);&#10;    }&#10;&#10;    @Override&#10;    public Department getDepartmentById(Long id) {&#10;        logger.info(&quot;Fetching department by id: {}&quot;, id);&#10;        return departmentRepository.findById(id)&#10;                .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Department not found with id: &quot; + id));&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Department&gt; getAllDepartments() {&#10;        logger.info(&quot;Fetching all departments&quot;);&#10;        return departmentRepository.findAll();&#10;    }&#10;&#10;    @Override&#10;    public Department updateDepartment(Long id, Department departmentDetails) {&#10;        Department department = getDepartmentById(id);&#10;        department.setName(departmentDetails.getName());&#10;        department.setLocation(departmentDetails.getLocation());&#10;        logger.info(&quot;Updating department: {}&quot;, id);&#10;        return departmentRepository.save(department);&#10;    }&#10;&#10;    @Override&#10;    public void deleteDepartment(Long id) {&#10;        Department department = getDepartmentById(id);&#10;        logger.info(&quot;Deleting department: {}&quot;, id);&#10;        departmentRepository.delete(department);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/EnrollmentServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/EnrollmentServiceImpl.java" />
              <option name="originalContent" value="package com.example.service.service.impl;&#10;&#10;import com.example.service.entity.Enrollment;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.EnrollmentRepository;&#10;import com.example.service.service.EnrollmentService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class EnrollmentServiceImpl implements EnrollmentService {&#10;    private static final Logger logger = LoggerFactory.getLogger(EnrollmentServiceImpl.class);&#10;    private final EnrollmentRepository enrollmentRepository;&#10;&#10;    @Override&#10;    public Enrollment saveEnrollment(Enrollment enrollment) {&#10;        logger.info(&quot;Saving enrollment for student: {} in course: {}&quot;, &#10;            enrollment.getStudent() != null ? enrollment.getStudent().getId() : null, &#10;            enrollment.getCourse() != null ? enrollment.getCourse().getId() : null);&#10;        return enrollmentRepository.save(enrollment);&#10;    }&#10;&#10;    @Override&#10;    public Enrollment getEnrollmentById(Long id) {&#10;        logger.info(&quot;Fetching enrollment by id: {}&quot;, id);&#10;        return enrollmentRepository.findById(id)&#10;                .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Enrollment not found with id: &quot; + id));&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Enrollment&gt; getAllEnrollments() {&#10;        logger.info(&quot;Fetching all enrollments&quot;);&#10;        return enrollmentRepository.findAll();&#10;    }&#10;&#10;    @Override&#10;    public Enrollment updateEnrollment(Long id, Enrollment enrollmentDetails) {&#10;        Enrollment enrollment = getEnrollmentById(id);&#10;        enrollment.setStudent(enrollmentDetails.getStudent());&#10;        enrollment.setCourse(enrollmentDetails.getCourse());&#10;        enrollment.setEnrollmentDate(enrollmentDetails.getEnrollmentDate());&#10;        enrollment.setGrade(enrollmentDetails.getGrade());&#10;        enrollment.setSemester(enrollmentDetails.getSemester());&#10;        logger.info(&quot;Updating enrollment: {}&quot;, id);&#10;        return enrollmentRepository.save(enrollment);&#10;    }&#10;&#10;    @Override&#10;    public void deleteEnrollment(Long id) {&#10;        Enrollment enrollment = getEnrollmentById(id);&#10;        logger.info(&quot;Deleting enrollment: {}&quot;, id);&#10;        enrollmentRepository.delete(enrollment);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.service.service.impl;&#10;&#10;import com.example.service.entity.Enrollment;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.EnrollmentRepository;&#10;import com.example.service.service.EnrollmentService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class EnrollmentServiceImpl implements EnrollmentService {&#10;    private static final Logger logger = LoggerFactory.getLogger(EnrollmentServiceImpl.class);&#10;    private final EnrollmentRepository enrollmentRepository;&#10;&#10;    @Override&#10;    public Enrollment saveEnrollment(Enrollment enrollment) {&#10;        logger.info(&quot;Saving enrollment for student: {} in course: {}&quot;, &#10;            enrollment.getStudent() != null ? enrollment.getStudent().getId() : null, &#10;            enrollment.getCourse() != null ? enrollment.getCourse().getId() : null);&#10;        return enrollmentRepository.save(enrollment);&#10;    }&#10;&#10;    @Override&#10;    public Enrollment getEnrollmentById(Long id) {&#10;        logger.info(&quot;Fetching enrollment by id: {}&quot;, id);&#10;        return enrollmentRepository.findById(id)&#10;                .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Enrollment not found with id: &quot; + id));&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Enrollment&gt; getAllEnrollments() {&#10;        logger.info(&quot;Fetching all enrollments&quot;);&#10;        return enrollmentRepository.findAll();&#10;    }&#10;&#10;    @Override&#10;    public Enrollment updateEnrollment(Long id, Enrollment enrollmentDetails) {&#10;        Enrollment enrollment = getEnrollmentById(id);&#10;        enrollment.setStudent(enrollmentDetails.getStudent());&#10;        enrollment.setCourse(enrollmentDetails.getCourse());&#10;        enrollment.setEnrollmentDate(enrollmentDetails.getEnrollmentDate());&#10;        enrollment.setGrade(enrollmentDetails.getGrade());&#10;        enrollment.setSemester(enrollmentDetails.getSemester());&#10;        logger.info(&quot;Updating enrollment: {}&quot;, id);&#10;        return enrollmentRepository.save(enrollment);&#10;    }&#10;&#10;    @Override&#10;    public void deleteEnrollment(Long id) {&#10;        Enrollment enrollment = getEnrollmentById(id);&#10;        logger.info(&quot;Deleting enrollment: {}&quot;, id);&#10;        enrollmentRepository.delete(enrollment);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/InstructorServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/InstructorServiceImpl.java" />
              <option name="updatedContent" value="package com.example.service.service.impl;&#10;&#10;import com.example.service.entity.Instructor;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.InstructorRepository;&#10;import com.example.service.service.InstructorService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class InstructorServiceImpl implements InstructorService {&#10;    private static final Logger logger = LoggerFactory.getLogger(InstructorServiceImpl.class);&#10;    private final InstructorRepository instructorRepository;&#10;&#10;    @Override&#10;    public Instructor saveInstructor(Instructor instructor) {&#10;        logger.info(&quot;Saving instructor: {}&quot;, instructor.getName());&#10;        return instructorRepository.save(instructor);&#10;    }&#10;&#10;    @Override&#10;    public Instructor getInstructorById(Long id) {&#10;        logger.info(&quot;Fetching instructor by id: {}&quot;, id);&#10;        return instructorRepository.findById(id)&#10;                .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Instructor not found with id: &quot; + id));&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Instructor&gt; getAllInstructors() {&#10;        logger.info(&quot;Fetching all instructors&quot;);&#10;        return instructorRepository.findAll();&#10;    }&#10;&#10;    @Override&#10;    public Instructor updateInstructor(Long id, Instructor instructorDetails) {&#10;        Instructor instructor = getInstructorById(id);&#10;        instructor.setName(instructorDetails.getName());&#10;        instructor.setEmail(instructorDetails.getEmail());&#10;        instructor.setPhone(instructorDetails.getPhone());&#10;        instructor.setSpecialization(instructorDetails.getSpecialization());&#10;        instructor.setDepartment(instructorDetails.getDepartment());&#10;        logger.info(&quot;Updating instructor: {}&quot;, id);&#10;        return instructorRepository.save(instructor);&#10;    }&#10;&#10;    @Override&#10;    public void deleteInstructor(Long id) {&#10;        Instructor instructor = getInstructorById(id);&#10;        logger.info(&quot;Deleting instructor: {}&quot;, id);&#10;        instructorRepository.delete(instructor);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/StudentServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/service/service/impl/StudentServiceImpl.java" />
              <option name="updatedContent" value="package com.example.service.service.impl;&#10;&#10;import com.example.service.entity.Student;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.StudentRepository;&#10;import com.example.service.service.StudentService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class StudentServiceImpl implements StudentService {&#10;    &#10;    private final StudentRepository studentRepository;&#10;&#10;    @Override&#10;    public Student saveStudent(Student student) {&#10;        return studentRepository.save(student);&#10;    }&#10;&#10;    @Override&#10;    public Student getStudentById(Long id) {&#10;        return studentRepository.findById(id)&#10;            .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Student not found with id: &quot; + id));&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Student&gt; getAllStudents() {&#10;        return studentRepository.findAll();&#10;    }&#10;&#10;    @Override&#10;    public Student updateStudent(Long id, Student studentDetails) {&#10;        Student student = getStudentById(id);&#10;        student.setName(studentDetails.getName());&#10;        student.setEmail(studentDetails.getEmail());&#10;        student.setPhone(studentDetails.getPhone());&#10;        student.setAddress(studentDetails.getAddress());&#10;        student.setDepartment(studentDetails.getDepartment());&#10;        return studentRepository.save(student);&#10;    }&#10;&#10;    @Override&#10;    public void deleteStudent(Long id) {&#10;        Student student = getStudentById(id);&#10;        studentRepository.delete(student);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/data.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/data.sql" />
              <option name="updatedContent" value="-- Sample Departments&#10;INSERT INTO department (id, name) VALUES (1, 'Computer Science');&#10;INSERT INTO department (id, name) VALUES (2, 'Mathematics');&#10;&#10;-- Sample Instructors&#10;INSERT INTO instructor (id, name, email) VALUES (1, 'Dr. Alice', 'alice@university.edu');&#10;INSERT INTO instructor (id, name, email) VALUES (2, 'Dr. Bob', 'bob@university.edu');&#10;&#10;-- Sample Courses&#10;INSERT INTO course (id, name, code, credits, description, instructor_id) VALUES (1, 'Algorithms', 'CS101', 4, 'Intro to Algorithms', 1);&#10;INSERT INTO course (id, name, code, credits, description, instructor_id) VALUES (2, 'Calculus', 'MATH101', 3, 'Intro to Calculus', 2);&#10;&#10;-- Sample Students&#10;INSERT INTO student (id, name, email, phone, address, department_id) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890', '123 Main St', 1);&#10;INSERT INTO student (id, name, email, phone, address, department_id) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '0987654321', '456 Elm St', 2);&#10;&#10;-- Sample Enrollments&#10;INSERT INTO enrollment (id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2024-01-10');&#10;INSERT INTO enrollment (id, student_id, course_id, enrollment_date) VALUES (2, 2, 2, '2024-01-11');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/service/controller/CourseControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/service/controller/CourseControllerTest.java" />
              <option name="updatedContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Course;&#10;import com.example.service.service.CourseService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;class CourseControllerTest {&#10;    private MockMvc mockMvc;&#10;&#10;    @Mock&#10;    private CourseService courseService;&#10;&#10;    @InjectMocks&#10;    private CourseController courseController;&#10;&#10;    private Course course;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;        mockMvc = MockMvcBuilders.standaloneSetup(courseController).build();&#10;        course = new Course();&#10;        course.setId(1L);&#10;        course.setName(&quot;Algorithms&quot;);&#10;        course.setCode(&quot;CS101&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testGetAllCourses() throws Exception {&#10;        List&lt;Course&gt; courses = Arrays.asList(course);&#10;        when(courseService.getAllCourses()).thenReturn(courses);&#10;        mockMvc.perform(get(&quot;/api/courses&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testGetCourseById() throws Exception {&#10;        when(courseService.getCourseById(1L)).thenReturn(course);&#10;        mockMvc.perform(get(&quot;/api/courses/1&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testCreateCourse() throws Exception {&#10;        when(courseService.saveCourse(any(Course.class))).thenReturn(course);&#10;        mockMvc.perform(post(&quot;/api/courses&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;Algorithms\&quot;,\&quot;code\&quot;:\&quot;CS101\&quot;}&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testUpdateCourse() throws Exception {&#10;        when(courseService.updateCourse(eq(1L), any(Course.class))).thenReturn(course);&#10;        mockMvc.perform(put(&quot;/api/courses/1&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;Algorithms\&quot;,\&quot;code\&quot;:\&quot;CS101\&quot;}&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteCourse() throws Exception {&#10;        doNothing().when(courseService).deleteCourse(1L);&#10;        mockMvc.perform(delete(&quot;/api/courses/1&quot;))&#10;                .andExpect(status().isNoContent());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/service/controller/DepartmentControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/service/controller/DepartmentControllerTest.java" />
              <option name="updatedContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Department;&#10;import com.example.service.service.DepartmentService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;class DepartmentControllerTest {&#10;    private MockMvc mockMvc;&#10;&#10;    @Mock&#10;    private DepartmentService departmentService;&#10;&#10;    @InjectMocks&#10;    private DepartmentController departmentController;&#10;&#10;    private Department department;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;        mockMvc = MockMvcBuilders.standaloneSetup(departmentController).build();&#10;        department = new Department();&#10;        department.setId(1L);&#10;        department.setName(&quot;Computer Science&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testGetAllDepartments() throws Exception {&#10;        List&lt;Department&gt; departments = Arrays.asList(department);&#10;        when(departmentService.getAllDepartments()).thenReturn(departments);&#10;        mockMvc.perform(get(&quot;/api/departments&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testGetDepartmentById() throws Exception {&#10;        when(departmentService.getDepartmentById(1L)).thenReturn(department);&#10;        mockMvc.perform(get(&quot;/api/departments/1&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testCreateDepartment() throws Exception {&#10;        when(departmentService.saveDepartment(any(Department.class))).thenReturn(department);&#10;        mockMvc.perform(post(&quot;/api/departments&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;Computer Science\&quot;}&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testUpdateDepartment() throws Exception {&#10;        when(departmentService.updateDepartment(eq(1L), any(Department.class))).thenReturn(department);&#10;        mockMvc.perform(put(&quot;/api/departments/1&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;Computer Science\&quot;}&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteDepartment() throws Exception {&#10;        doNothing().when(departmentService).deleteDepartment(1L);&#10;        mockMvc.perform(delete(&quot;/api/departments/1&quot;))&#10;                .andExpect(status().isNoContent());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/service/controller/InstructorControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/service/controller/InstructorControllerTest.java" />
              <option name="updatedContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Instructor;&#10;import com.example.service.service.InstructorService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;class InstructorControllerTest {&#10;    private MockMvc mockMvc;&#10;&#10;    @Mock&#10;    private InstructorService instructorService;&#10;&#10;    @InjectMocks&#10;    private InstructorController instructorController;&#10;&#10;    private Instructor instructor;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;        mockMvc = MockMvcBuilders.standaloneSetup(instructorController).build();&#10;        instructor = new Instructor();&#10;        instructor.setId(1L);&#10;        instructor.setName(&quot;Dr. Alice&quot;);&#10;        instructor.setEmail(&quot;alice@university.edu&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testGetAllInstructors() throws Exception {&#10;        List&lt;Instructor&gt; instructors = Arrays.asList(instructor);&#10;        when(instructorService.getAllInstructors()).thenReturn(instructors);&#10;        mockMvc.perform(get(&quot;/api/instructors&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testGetInstructorById() throws Exception {&#10;        when(instructorService.getInstructorById(1L)).thenReturn(instructor);&#10;        mockMvc.perform(get(&quot;/api/instructors/1&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testCreateInstructor() throws Exception {&#10;        when(instructorService.saveInstructor(any(Instructor.class))).thenReturn(instructor);&#10;        mockMvc.perform(post(&quot;/api/instructors&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;Dr. Alice\&quot;,\&quot;email\&quot;:\&quot;alice@university.edu\&quot;}&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testUpdateInstructor() throws Exception {&#10;        when(instructorService.updateInstructor(eq(1L), any(Instructor.class))).thenReturn(instructor);&#10;        mockMvc.perform(put(&quot;/api/instructors/1&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;Dr. Alice\&quot;,\&quot;email\&quot;:\&quot;alice@university.edu\&quot;}&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteInstructor() throws Exception {&#10;        doNothing().when(instructorService).deleteInstructor(1L);&#10;        mockMvc.perform(delete(&quot;/api/instructors/1&quot;))&#10;                .andExpect(status().isNoContent());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/service/controller/StudentControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/service/controller/StudentControllerTest.java" />
              <option name="updatedContent" value="package com.example.service.controller;&#10;&#10;import com.example.service.entity.Student;&#10;import com.example.service.service.StudentService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;class StudentControllerTest {&#10;    private MockMvc mockMvc;&#10;&#10;    @Mock&#10;    private StudentService studentService;&#10;&#10;    @InjectMocks&#10;    private StudentController studentController;&#10;&#10;    private Student student;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;        mockMvc = MockMvcBuilders.standaloneSetup(studentController).build();&#10;        student = new Student();&#10;        student.setId(1L);&#10;        student.setName(&quot;John Doe&quot;);&#10;        student.setEmail(&quot;john.doe@example.com&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testGetAllStudents() throws Exception {&#10;        List&lt;Student&gt; students = Arrays.asList(student);&#10;        when(studentService.getAllStudents()).thenReturn(students);&#10;        mockMvc.perform(get(&quot;/api/students&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testGetStudentById() throws Exception {&#10;        when(studentService.getStudentById(1L)).thenReturn(student);&#10;        mockMvc.perform(get(&quot;/api/students/1&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testCreateStudent() throws Exception {&#10;        when(studentService.saveStudent(any(Student.class))).thenReturn(student);&#10;        mockMvc.perform(post(&quot;/api/students&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;email\&quot;:\&quot;john.doe@example.com\&quot;}&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testUpdateStudent() throws Exception {&#10;        when(studentService.updateStudent(eq(1L), any(Student.class))).thenReturn(student);&#10;        mockMvc.perform(put(&quot;/api/students/1&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;email\&quot;:\&quot;john.doe@example.com\&quot;}&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteStudent() throws Exception {&#10;        doNothing().when(studentService).deleteStudent(1L);&#10;        mockMvc.perform(delete(&quot;/api/students/1&quot;))&#10;                .andExpect(status().isNoContent());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/service/service/CourseServiceImplTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/service/service/CourseServiceImplTest.java" />
              <option name="updatedContent" value="package com.example.service.service;&#10;&#10;import com.example.service.entity.Course;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.CourseRepository;&#10;import com.example.service.service.impl.CourseServiceImpl;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class CourseServiceImplTest {&#10;    @Mock&#10;    private CourseRepository courseRepository;&#10;&#10;    @InjectMocks&#10;    private CourseServiceImpl courseService;&#10;&#10;    private Course course;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;        course = new Course();&#10;        course.setId(1L);&#10;        course.setName(&quot;Algorithms&quot;);&#10;        course.setCode(&quot;CS101&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testSaveCourse() {&#10;        when(courseRepository.save(course)).thenReturn(course);&#10;        Course saved = courseService.saveCourse(course);&#10;        assertEquals(&quot;Algorithms&quot;, saved.getName());&#10;    }&#10;&#10;    @Test&#10;    void testGetCourseById_Found() {&#10;        when(courseRepository.findById(1L)).thenReturn(Optional.of(course));&#10;        Course found = courseService.getCourseById(1L);&#10;        assertEquals(&quot;Algorithms&quot;, found.getName());&#10;    }&#10;&#10;    @Test&#10;    void testGetCourseById_NotFound() {&#10;        when(courseRepository.findById(2L)).thenReturn(Optional.empty());&#10;        assertThrows(ResourceNotFoundException.class, () -&gt; courseService.getCourseById(2L));&#10;    }&#10;&#10;    @Test&#10;    void testGetAllCourses() {&#10;        when(courseRepository.findAll()).thenReturn(Arrays.asList(course));&#10;        List&lt;Course&gt; courses = courseService.getAllCourses();&#10;        assertEquals(1, courses.size());&#10;    }&#10;&#10;    @Test&#10;    void testUpdateCourse() {&#10;        Course updated = new Course();&#10;        updated.setName(&quot;Advanced Algorithms&quot;);&#10;        updated.setCode(&quot;CS201&quot;);&#10;        when(courseRepository.findById(1L)).thenReturn(Optional.of(course));&#10;        when(courseRepository.save(any(Course.class))).thenReturn(updated);&#10;        Course result = courseService.updateCourse(1L, updated);&#10;        assertEquals(&quot;Advanced Algorithms&quot;, result.getName());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteCourse() {&#10;        when(courseRepository.findById(1L)).thenReturn(Optional.of(course));&#10;        doNothing().when(courseRepository).delete(course);&#10;        assertDoesNotThrow(() -&gt; courseService.deleteCourse(1L));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/service/service/EnrollmentServiceImplTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/service/service/EnrollmentServiceImplTest.java" />
              <option name="updatedContent" value="package com.example.service.service;&#10;&#10;import com.example.service.entity.Enrollment;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.EnrollmentRepository;&#10;import com.example.service.service.impl.EnrollmentServiceImpl;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class EnrollmentServiceImplTest {&#10;    @Mock&#10;    private EnrollmentRepository enrollmentRepository;&#10;&#10;    @InjectMocks&#10;    private EnrollmentServiceImpl enrollmentService;&#10;&#10;    private Enrollment enrollment;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;        enrollment = new Enrollment();&#10;        enrollment.setId(1L);&#10;        enrollment.setEnrollmentDate(LocalDate.now());&#10;        enrollment.setGrade(&quot;A&quot;);&#10;        enrollment.setSemester(&quot;Spring 2024&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testSaveEnrollment() {&#10;        when(enrollmentRepository.save(enrollment)).thenReturn(enrollment);&#10;        Enrollment saved = enrollmentService.saveEnrollment(enrollment);&#10;        assertEquals(&quot;A&quot;, saved.getGrade());&#10;    }&#10;&#10;    @Test&#10;    void testGetEnrollmentById_Found() {&#10;        when(enrollmentRepository.findById(1L)).thenReturn(Optional.of(enrollment));&#10;        Enrollment found = enrollmentService.getEnrollmentById(1L);&#10;        assertEquals(&quot;A&quot;, found.getGrade());&#10;    }&#10;&#10;    @Test&#10;    void testGetEnrollmentById_NotFound() {&#10;        when(enrollmentRepository.findById(2L)).thenReturn(Optional.empty());&#10;        assertThrows(ResourceNotFoundException.class, () -&gt; enrollmentService.getEnrollmentById(2L));&#10;    }&#10;&#10;    @Test&#10;    void testGetAllEnrollments() {&#10;        when(enrollmentRepository.findAll()).thenReturn(Arrays.asList(enrollment));&#10;        List&lt;Enrollment&gt; enrollments = enrollmentService.getAllEnrollments();&#10;        assertEquals(1, enrollments.size());&#10;    }&#10;&#10;    @Test&#10;    void testUpdateEnrollment() {&#10;        Enrollment updated = new Enrollment();&#10;        updated.setGrade(&quot;B&quot;);&#10;        updated.setSemester(&quot;Fall 2024&quot;);&#10;        updated.setEnrollmentDate(LocalDate.now());&#10;        when(enrollmentRepository.findById(1L)).thenReturn(Optional.of(enrollment));&#10;        when(enrollmentRepository.save(any(Enrollment.class))).thenReturn(updated);&#10;        Enrollment result = enrollmentService.updateEnrollment(1L, updated);&#10;        assertEquals(&quot;B&quot;, result.getGrade());&#10;        assertEquals(&quot;Fall 2024&quot;, result.getSemester());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteEnrollment() {&#10;        when(enrollmentRepository.findById(1L)).thenReturn(Optional.of(enrollment));&#10;        doNothing().when(enrollmentRepository).delete(enrollment);&#10;        assertDoesNotThrow(() -&gt; enrollmentService.deleteEnrollment(1L));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/service/service/StudentServiceImplTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/service/service/StudentServiceImplTest.java" />
              <option name="updatedContent" value="package com.example.service.service;&#10;&#10;import com.example.service.entity.Student;&#10;import com.example.service.exception.ResourceNotFoundException;&#10;import com.example.service.repository.StudentRepository;&#10;import com.example.service.service.impl.StudentServiceImpl;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class StudentServiceImplTest {&#10;    @Mock&#10;    private StudentRepository studentRepository;&#10;&#10;    @InjectMocks&#10;    private StudentServiceImpl studentService;&#10;&#10;    private Student student;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;        student = new Student();&#10;        student.setId(1L);&#10;        student.setName(&quot;John Doe&quot;);&#10;        student.setEmail(&quot;john.doe@example.com&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testSaveStudent() {&#10;        when(studentRepository.save(student)).thenReturn(student);&#10;        Student saved = studentService.saveStudent(student);&#10;        assertEquals(&quot;John Doe&quot;, saved.getName());&#10;    }&#10;&#10;    @Test&#10;    void testGetStudentById_Found() {&#10;        when(studentRepository.findById(1L)).thenReturn(Optional.of(student));&#10;        Student found = studentService.getStudentById(1L);&#10;        assertEquals(&quot;John Doe&quot;, found.getName());&#10;    }&#10;&#10;    @Test&#10;    void testGetStudentById_NotFound() {&#10;        when(studentRepository.findById(2L)).thenReturn(Optional.empty());&#10;        assertThrows(ResourceNotFoundException.class, () -&gt; studentService.getStudentById(2L));&#10;    }&#10;&#10;    @Test&#10;    void testGetAllStudents() {&#10;        when(studentRepository.findAll()).thenReturn(Arrays.asList(student));&#10;        List&lt;Student&gt; students = studentService.getAllStudents();&#10;        assertEquals(1, students.size());&#10;    }&#10;&#10;    @Test&#10;    void testUpdateStudent() {&#10;        Student updated = new Student();&#10;        updated.setName(&quot;Jane Doe&quot;);&#10;        updated.setEmail(&quot;jane.doe@example.com&quot;);&#10;        when(studentRepository.findById(1L)).thenReturn(Optional.of(student));&#10;        when(studentRepository.save(any(Student.class))).thenReturn(updated);&#10;        Student result = studentService.updateStudent(1L, updated);&#10;        assertEquals(&quot;Jane Doe&quot;, result.getName());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteStudent() {&#10;        when(studentRepository.findById(1L)).thenReturn(Optional.of(student));&#10;        doNothing().when(studentRepository).delete(student);&#10;        assertDoesNotThrow(() -&gt; studentService.deleteStudent(1L));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>